{"title":"Flutter页面跳转到IOS原生界面   如何实现？","date":"2019-07-10T16:23:23.000Z","author":"James🐒","thumbnail":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1562931729970&di=a2a33d1ea44ad1fbfbb9495c658d0926&imgtype=0&src=http%3A%2F%2F2e.zol-img.com.cn%2Fproduct%2F129_500x370%2F466%2FceLvj6nNCps.jpg","link":"post/flutter-ios-conmmunicate","tags":["Flutter","Native"],"categories":["Flutter"],"updated":"2019-07-12T08:54:21.668Z","content":"<p>2019年初的时候，我学过一阵子Flutter，着重看了下Bloc(business logic component),自己写了个小demo。完了之后，Flutter就被抛之脑后了。   </p>\n<p>这两天，有朋友请我帮忙，他们想从Flutter页面跳转到IOS原生OC的界面，虽然我不是大神，只是一只野生的猿，但我喜欢挑战，答应帮他们看看。说干就干，参考了官网的关于编写跨平台代码文档：<a href=\"https://flutter.dev/docs/development/platform-integration/platform-channels\" target=\"_blank\" rel=\"noopener\">传送门</a><br><img src=\"https://user-gold-cdn.xitu.io/2019/7/11/16be0ec744b6b714?w=580&h=647&f=png&s=23232\" alt></p>\n<p>其实基本思路很简单，两步</p>\n<p>一.Flutter 传递消息给原生，说我要去原生界面</p>\n<p>二.在原生AppDelegate.m里，将FlutterViewController 作为rootViewController，然后放在Navigation Stack里。当原生接收到消息，实现跳转功能，完事！</p>\n<p>话不多说，Let’s dive in.</p>\n<h3 id=\"第一步，Flutter-怎么将消息传递到原生端呢？\">第一步，Flutter 怎么将消息传递到原生端呢？<a href=\"post/flutter-ios-conmmunicate#第一步，Flutter-怎么将消息传递到原生端呢？\"></a></h3><p>1.创建一个通信的频道</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &apos;dart:async&apos;;</span><br><span class=\"line\">import &apos;package:flutter/material.dart&apos;;</span><br><span class=\"line\">import &apos;package:flutter/services.dart&apos;;</span><br><span class=\"line\">...</span><br><span class=\"line\">class _MyHomePageState extends State&lt;MyHomePage&gt; &#123;</span><br><span class=\"line\">  static const platform = const MethodChannel(&apos;samples.flutter.dev/goToNativePage&apos;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>2.实现Trigger Function</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Future&lt;void&gt; _goToNativePage() async &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      final int result = await platform</span><br><span class=\"line\">          .invokeMethod(&apos;goToNativePage&apos;, &#123;&apos;test&apos;: &apos;from flutter&apos;&#125;);</span><br><span class=\"line\">      print(result);</span><br><span class=\"line\">    &#125; on PlatformException catch (e) &#123;&#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">@override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Material(</span><br><span class=\"line\">      child: Center(</span><br><span class=\"line\">        child: Column(</span><br><span class=\"line\">          mainAxisAlignment: MainAxisAlignment.spaceEvenly,</span><br><span class=\"line\">          children: [</span><br><span class=\"line\">            RaisedButton(</span><br><span class=\"line\">              child: Text(&apos;去原生界面&apos;),</span><br><span class=\"line\">              onPressed: _goToNativePage,</span><br><span class=\"line\">              color: Colors.blueAccent,</span><br><span class=\"line\">              textColor: Colors.white,</span><br><span class=\"line\">            ),</span><br><span class=\"line\">            Text(</span><br><span class=\"line\">              &quot;Flutter 页面&quot;,</span><br><span class=\"line\">              style: new TextStyle(</span><br><span class=\"line\">                fontSize: 30.0,</span><br><span class=\"line\">                fontWeight: FontWeight.w900,</span><br><span class=\"line\">                fontFamily: &quot;Georgia&quot;,</span><br><span class=\"line\">              ),</span><br><span class=\"line\">            )</span><br><span class=\"line\">          ],</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>添加一个按钮，给这按钮再添加一个_goToNativePage方法，在这里如果还要传递参数的话，直接像这样写就ok了  </p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">platform.invokeMethod(&apos;goToNativePage&apos;, &#123;&apos;key&apos;: &apos;value&apos;&#125;);</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"第二步-，原生接收消息并实现跳转\">第二步 ，原生接收消息并实现跳转<a href=\"post/flutter-ios-conmmunicate#第二步-，原生接收消息并实现跳转\"></a></h3><p>因为你导航到新界面，所以需要引入<code>UINavigationController</code></p>\n<p>在AppDelegate.m里，<code>@implementation AppDelegate</code>上方添加代码</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface AppDelegate()</span><br><span class=\"line\">  @property (nonatomic, strong) UINavigationController *navigationController;</span><br><span class=\"line\">@end</span><br></pre></td></tr></table></div></figure>\n\n<p>1.将FlutterView设为根视图</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FlutterViewController *controller = (FlutterViewController*)self.window.rootViewController;</span><br></pre></td></tr></table></div></figure>\n\n<p>2.嵌入导航堆栈里</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.navigationController = [[UINavigationController alloc] initWithRootViewController:controller];</span><br><span class=\"line\">self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];</span><br><span class=\"line\">self.window.rootViewController = self.navigationController;</span><br><span class=\"line\">[self.navigationController setNavigationBarHidden:YES animated:YES];</span><br><span class=\"line\">[self.window makeKeyAndVisible];</span><br></pre></td></tr></table></div></figure>\n\n<p>3.Flutter和原生通信的接口的实现</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FlutterMethodChannel* testChannel = </span><br><span class=\"line\">        [</span><br><span class=\"line\">             FlutterMethodChannel methodChannelWithName:@&quot;samples.flutter.dev/goToNativePage&quot;</span><br><span class=\"line\">             binaryMessenger:controller</span><br><span class=\"line\">        ];</span><br><span class=\"line\">\t</span><br><span class=\"line\">[testChannel setMethodCallHandler:^(FlutterMethodCall* call, FlutterResult result) &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tNSLog(@&quot;%@&quot;, call.method);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t//接收从flutter传递过来的参数</span><br><span class=\"line\">\tNSLog(@&quot;%@&quot;, call.arguments[@&quot;test&quot;]);</span><br><span class=\"line\"></span><br><span class=\"line\">\tif ([@&quot;goToNativePage&quot; isEqualToString:call.method]) &#123;</span><br><span class=\"line\">        //实现跳转的代码</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t\tresult(FlutterMethodNotImplemented);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></div></figure>\n\n<p>想获取从flutter传递过来的参数， <code>call.arguments[@&quot;key&quot;]</code>,用这段代码</p>\n<p>4.实现跳转到原生界面  </p>\n<p>到了这，就相当简单了，补全跳转代码</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString * storyboardName = @&quot;Main&quot;;</span><br><span class=\"line\">UIStoryboard *storyboard = [UIStoryboard storyboardWithName:storyboardName bundle: nil];</span><br><span class=\"line\">UIViewController * vc = [storyboard instantiateViewControllerWithIdentifier:@&quot;NativeViewController&quot;];</span><br><span class=\"line\">vc.navigationItem.title = call.arguments[@&quot;test&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">[self.navigationController pushViewController:vc animated:true];</span><br></pre></td></tr></table></div></figure>\n\n<p>gayhub 项目地址：<a href=\"https://github.com/JamesInGod/flutter-native-oc\" target=\"_blank\" rel=\"noopener\">传送门</a><br>IOS Swift版本：<a href=\"https://github.com/JamesInGod/flutter-native-swift\" target=\"_blank\" rel=\"noopener\">传送门</a></p>\n<p>到了这里，功能就实现了。如果有更好方式，请告诉我.</p>\n","next":{"title":"超简单！IOS，在App中使用Safari打开网页（swift）","link":"post/ios-safariview"},"plink":"http://yoursite.com/post/flutter-ios-conmmunicate/"}