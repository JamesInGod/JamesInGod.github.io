{"title":"Flutter实现IOS风格选项卡","date":"2019-01-23T16:23:23.000Z","author":"James🐒","link":"post/flutter-ios-cupertino-tabbar","tags":["Hybrid"],"categories":["Flutter"],"updated":"2019-07-06T13:30:06.778Z","content":"<p>第一次知道Flutter的时候，那时它有30K Star,短短半年时间，到现在的52.6K Star,增长迅猛,可以看出的确火爆.</p>\n<p>作为一个热(担)爱(心)学(掉)习(队)的程序猿,怎么能错过呢？</p>\n<p>话不多说，我们直接进入正题，如何用flutter实现IOS风格的选项卡功能.</p>\n<p>Flutter有个中文网,<a href=\"https://flutterchina.club/。\" target=\"_blank\" rel=\"noopener\">https://flutterchina.club/。</a></p>\n<p>这里边介绍的东西很不错,对比着英文网站来看,里面的内容就有些陈旧了。</p>\n<p>在查看英文网站的时候,可以看到谷歌提供了很多IOS Cupertino风格的组件,其中有一个<br>叫做CupertinoTabScaffold,看这个单词，大概能猜出来这是用来实现底部选项卡功能的。</p>\n<p>新建项目,IDE会自动帮我们弄出一个默认main.dart来,我们删除其中多余的代码，最后像这样：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &apos;package:flutter/material.dart&apos;;</span><br><span class=\"line\">void main() =&gt; runApp(MyApp());</span><br><span class=\"line\">class MyApp extends StatelessWidget &#123;</span><br><span class=\"line\">  // This widget is the root of your application.</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return MaterialApp(</span><br><span class=\"line\">      home: MyHomePage(),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class MyHomePage extends StatefulWidget &#123;</span><br><span class=\"line\">  MyHomePage(&#123;Key key, this.title&#125;) : super(key: key);</span><br><span class=\"line\">  final String title;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  _MyHomePageState createState() =&gt; _MyHomePageState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class _MyHomePageState extends State&lt;MyHomePage&gt; &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Scaffold(</span><br><span class=\"line\">        //这里需要返回cupertinoTabScaffold组件</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>因为我们要实现IOS Cupertino风格,我们要在最上面添加一行代码,这样我们才能顺利使用Cupertino风格组件</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &apos;package:flutter/cupertino.dart&apos;;</span><br></pre></td></tr></table></div></figure>\n\n<p>然后把上边MyApp类中的return MaterialApp 修改为 return CupertinoApp;</p>\n<p>仔细查看官方文档后，可以大概理出来如下的思路：</p>\n<div class=\"article-img\"><p><img src=\"https://user-gold-cdn.xitu.io/2019/2/8/168cd914db7a37db?w=1384&h=790&f=png&s=188823\" alt data-zoomable></p></div>\n<p>把官网的例子拿过来，改改，就是这个样子了,代码如下：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &apos;package:flutter/material.dart&apos;;</span><br><span class=\"line\">import &apos;package:flutter/cupertino.dart&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">void main() =&gt; runApp(MyApp());</span><br><span class=\"line\"></span><br><span class=\"line\">class MyApp extends StatelessWidget &#123;</span><br><span class=\"line\">  // This widget is the root of your application.</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return CupertinoApp(</span><br><span class=\"line\">      home: MyHomePage(),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class MyHomePage extends StatefulWidget &#123;</span><br><span class=\"line\">  MyHomePage(&#123;Key key, this.title&#125;) : super(key: key);</span><br><span class=\"line\">  final String title;</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  _MyHomePageState createState() =&gt; _MyHomePageState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class _MyHomePageState extends State&lt;MyHomePage&gt; &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Scaffold(</span><br><span class=\"line\">      body: CupertinoTabScaffold(</span><br><span class=\"line\">        tabBar: CupertinoTabBar(</span><br><span class=\"line\">          activeColor: CupertinoColors.activeBlue,</span><br><span class=\"line\">          backgroundColor: CupertinoColors.inactiveGray,</span><br><span class=\"line\">          items: [</span><br><span class=\"line\">            BottomNavigationBarItem(</span><br><span class=\"line\">              icon: Icon(CupertinoIcons.home),</span><br><span class=\"line\">              title: Text(&quot;主页&quot;)</span><br><span class=\"line\">            ),</span><br><span class=\"line\">            BottomNavigationBarItem(</span><br><span class=\"line\">              icon: Icon(CupertinoIcons.eye),</span><br><span class=\"line\">              title: Text(&quot;发现&quot;)</span><br><span class=\"line\">            ),</span><br><span class=\"line\">          ],</span><br><span class=\"line\"></span><br><span class=\"line\">        ),</span><br><span class=\"line\">        tabBuilder: (BuildContext context, int index)&#123;</span><br><span class=\"line\">          return CupertinoTabView(</span><br><span class=\"line\">            builder: (BuildContext context)&#123;</span><br><span class=\"line\">                //点击tab的时候,根据index的值渲染对应的页面</span><br><span class=\"line\">                if(index == 0)&#123;</span><br><span class=\"line\">                    return TestPageOne();</span><br><span class=\"line\">                &#125;else&#123;</span><br><span class=\"line\">                    return TestPageTwo();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                //当tab有多个的时候,就可以使用switch</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          );</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>我们根据index的变化,返回不同的页面。新建两个类</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class TestPageOne extends StatelessWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Center(</span><br><span class=\"line\">      child: new Text(</span><br><span class=\"line\">            &quot;页面一&quot;, </span><br><span class=\"line\">            style: new TextStyle(fontSize:36.0,</span><br><span class=\"line\">            color: CupertinoColors.activeBlue,</span><br><span class=\"line\">            fontWeight: FontWeight.w800,</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class TestPageTwo extends StatelessWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Center(</span><br><span class=\"line\">      child: new Text(</span><br><span class=\"line\">            &quot;页面二&quot;, </span><br><span class=\"line\">            style: new TextStyle(fontSize:36.0,</span><br><span class=\"line\">            color: Colors.pink,</span><br><span class=\"line\">            fontWeight: FontWeight.w800,</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>运行命令 flutter run,跑起来结果如下：</p>\n<div class=\"article-img\"><p><img src=\"https://user-gold-cdn.xitu.io/2019/2/8/168cdb354cc8d7ee?w=1514&h=1330&f=png&s=256352\" alt data-zoomable></p></div>\n<p>就是这样了,看起来也没什么.</p>\n<p>我暂时还没有用Flutter布过局,嵌套写法让我觉得有点恶心,层数多了,到时候修改起来会不会吐？？总的来说,这个Flutter看起来还不错,因为它直接用gpu来渲染,不像weex那样还是用原生渲染，感觉在抹平两个平台的差异上,Flutter 还是很有优势的</p>\n<p>后面会继续学习,继续分享</p>\n","next":{"title":"JS 正则提取字符串中特定的某一部分","link":"post/js-exeg"},"plink":"http://funbible.gearhostpreview.com/post/flutter-ios-cupertino-tabbar/"}